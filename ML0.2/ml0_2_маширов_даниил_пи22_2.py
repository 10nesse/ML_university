# -*- coding: utf-8 -*-
"""ML0.2_Маширов_Даниил_ПИ22-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I2S8PiTOETWi4aLRg1UhNN7nq-9iWmkS
"""

import numpy as np
import pandas as pd

"""1) Загрузите данные по вариантам в ноутбук."""

df = pd.read_excel('Вариант 2.xlsx', skiprows = 2, skipfooter = 1)
print(df.head(5))

"""2) Сделайте описательную статистику полученных данных."""

df.describe()

"""3) Найдите процент учащихся, выполнивших работу ниже среднего."""

average_score = df['Балл'].mean()
average_score

below_average = df[df['Балл'] < average_score]
below_average.head(3)

percent_below_average = below_average.shape[0] / df.shape[0] *100 # .shape[0] - способ получить количество строк
print(f"Процент учащихся, выполнивших работу ниже среднего: {percent_below_average:.2f}%")

"""4) Найти процент учащихся не сдавших экзамен."""

min_score = df['Минимальный балл']
not_passed = df[df['Балл'] < min_score]
not_passed.head(3)

percent_not_passed = not_passed.shape[0] / df.shape[0] * 100
print(f"Процент учащихся, не сдавших экзамен: {percent_not_passed:.2f}%")

"""5) Постройте круговую диаграмму, показывающую распределение сдавших и не сдавших экзамен."""

import matplotlib.pyplot as plt

passed_count = len(df[df['Балл'] >= min_score])
not_passed_count = len(df[df['Балл'] < min_score])

labels = ['Сдавшие', 'Не сдавшие']
data = [passed_count, not_passed_count]

colors = ['#77dd77', '#ff9999']

plt.figure(figsize=(6, 6))
plt.pie(data, labels=labels, colors=colors, autopct='%1.1f%%')
plt.axis('equal')
plt.title('Распределение сдавших и не сдавших экзамен')
plt.show()

"""6) Постройте ядерную оценку плотности распределению баллов за экзамен."""

import seaborn as sns

scores = df['Балл']

plt.figure(figsize=(8, 6))  # Устанавливаем размер графика (по желанию)
sns.kdeplot(scores, fill=True, color='blue' )
plt.xlabel('Баллы за экзамен')
plt.ylabel('Плотность')
plt.title('Ядерная оценка плотности баллов за экзамен')
plt.show()

"""7) Найдите процентное соотношение учащихся, сдавших экзамен на «отлично», «хорошо», «удовлетворительно», «неудовлетворительно»."""

def assign_grade(x):
    if x < 62:
        return 2
    elif x > 62 and x <77:
        return 3
    elif x > 77 and x < 91:
        return 4
    else:
        return 5

# df['Балл 5'] = df.loc[:,'Балл']
# df['Балл 5'] = df['Балл 5'].apply(replace_func)
# df.groupby(['Балл 5']).agg({'Балл 5': 'count'})
# df.groupby(['Балл 5']).agg({'Балл 5': 'count'}) / df.shape[0] * 100

df['Оценка'] = df['Балл'].apply(assign_grade)
grade_counts = df['Оценка'].value_counts()
df.groupby(['Оценка']).agg({'Оценка': 'count'}) / df.shape[0] * 100

df.head(3)

"""8) Какое процентное соотношение юношей и девушек писало данный экзамен?"""

Men = df[df.loc[:, 'Пол'] == 'М'].count()
Women = df[df.loc[:, 'Пол'] == 'Ж'].count()

#per_men = Men[0] / df.shape[0] *100
#per_women = Women[0] / df.shape[0] *100

df.groupby(['Пол']).agg({'Пол': 'count'}) / df.shape[0] * 100

"""9) Сколько школ принимало участие в экзамене?"""

df['№ школы'].nunique()

"""10) Сколько всего заданий с кратким ответом? С развернутым ответом?"""

shortAns = df.loc[0, 'Задания с кратким ответом']
longAns = df.loc[0, 'Задания с развёрнутым ответом']

print(len(shortAns), len(longAns))

"""11) Пусть задания с кратким ответом будут задания типа В. Соответственно всего по экзамену вопросов класса В: В
, ... Вк
 Посчитайте процент выполненных и невыполненных заданий по каждому вопросу класса В.
"""

for i in range(1, len(shortAns) + 1):
    df[f'B{i}'] = ""

for i, row in df.iterrows():
    short_answer = row['Задания с кратким ответом']
    for j in range(1, len(shortAns) + 1):
        if short_answer[j - 1] == '+':
            df.at[i, f'B{j}'] = '+'
        else:
            df.at[i, f'B{j}'] = '-'

df

for i in range(1, len(shortAns) + 1):
    total_completed = df[f'B{i}'].apply(lambda x: 1 if x == '+' else 0).mean() * 100
    total_not_completed = df[f'B{i}'].apply(lambda x: 1 if x == '-' else 0).mean() * 100

    print(f'Задание B{i}:')
    print(f'Выполнено: {total_completed:.2f}%')
    print(f'Невыполнено: {total_not_completed:.2f}%')
    print()

df.head(5)

# Определяем количество заданий типа C в вашем наборе данных
num_c_tasks = 7  # Замените на фактическое количество заданий

# Создаем столбцы C1, C2, ..., Cn для баллов заданий типа C
for i in range(1, num_c_tasks + 1):
    df[f'C{i}'] = ""

# Заполняем столбцы данными
for i, row in df.iterrows():
    long_answer = row['Задания с развёрнутым ответом']
    c_scores = [int(score.split('(')[0]) for score in long_answer.split()[::3]]  # Берем каждый третий элемент

    for j in range(1, min(num_c_tasks + 1, len(c_scores))):  # Учитываем неполные строки
        df.at[i, f'C{j}'] = c_scores[j - 1]

df.head(5)

"""12) Аналогично и с типом С (ответы с развернутым ответом)"""

for i in range(1, len(longAns)//4 + 1):
    df[f'C{i}'] = ""

# Заполняем столбцы данными
for i, row in df.iterrows():
    long_answer = row['Задания с развёрнутым ответом']

    # Убираем скобки и преобразуем в строку без пробелов
    long_answer = long_answer.replace('(', '').replace(')', '').replace(' ', '')

    # Заполняем столбцы данными
    for j in range(1, num_c_tasks + 1):
        df.at[i, f'C{j}'] = int(long_answer[j - 1])

df.head(5)

"""13) Сделайте анализ по двум школам:

i. по всем выполненным заданиям типа В

ii. по заданиям типа С больше 50%

iii. по среднему баллу юношей и девушек

i
"""

schools = df[(df['№ школы'] == 132) | (df['№ школы'] == 136)]
tasks = list(schools.loc[:, 'B1':'B12'])

percents_136 = [len(df[(df['№ школы'] == 136) & (df[i] == '+')]) / len(df[df['№ школы'] == 136]) * 100 for i in tasks]
percents_132 = [len(df[(df['№ школы'] == 132) & (df[i] == '+')]) / len(df[df['№ школы'] == 132]) * 100 for i in tasks]

new_df = pd.DataFrame(index=tasks, data={'School_132': percents_132, 'School_136': percents_136})

plt.style.use('ggplot')
colors = ['#E14949', '#2E86AB']  # Выберите красивые цвета для столбцов

ax = new_df.plot(kind='bar', color=colors, figsize=(10, 6))
plt.title('Процент выполненных задач в школах 132 и 136')
plt.xlabel('Задачи')
plt.ylabel('Процент выполнения')
plt.xticks(rotation=45)  # Поворот меток по оси x для улучшения читаемости

plt.legend(title='Школа', loc='upper right')

plt.tight_layout()
plt.show()

"""ii"""

import re

max_score = [round(int(i)/2) for i in re.findall(r'\((\d)\)', df['Задания с развёрнутым ответом'][0])]
tasks = list(schools.loc[:, 'C1':'C7'])
task_score = zip(tasks, max_score)

percents_136 = [len(df[(df['№ школы'] == 136) & (df[task].astype(int) >= max)])/len(df[df['№ школы'] == 136])*100 for task, max in zip(tasks, max_score)]
percents_132 = [len(df[(df['№ школы'] == 132) & (df[task].astype(int) >= max)])/len(df[df['№ школы'] == 132])*100 for task, max in zip(tasks, max_score)]

new_df = pd.DataFrame(index=tasks, data={'School_132': percents_132, 'School_136': percents_136})
new_df.plot.bar()

gender = ['Ж', 'М']
mean_136 = [df[(df['Пол'] == i) & (df['№ школы'] == 136)]['Балл'].mean() for i in gender]
mean_132 = [df[(df['Пол'] == i) & (df['№ школы'] == 132)]['Балл'].mean() for i in gender]
new_df = pd.DataFrame(index=gender, data={'School_132': mean_132, 'School_136': mean_136})

plt.style.use('ggplot')
colors = ['#E14949', '#2E86AB']

ax = new_df.plot(kind='bar', color=colors, figsize=(8, 6))
plt.title('Средний балл по полу в школах 132 и 136')
plt.xlabel('Пол')
plt.ylabel('Средний балл')
plt.xticks(rotation=0)


plt.legend(title='Школа', loc='upper right')


plt.tight_layout()
plt.show()